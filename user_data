#!/bin/bash

# Atualizar pacotes e instalar dependências
yum update -y
yum install -y git python3 at

# Instalar GitHub CLI
yum install -y yum-utils
yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
yum install -y gh

# Iniciar serviço atd
systemctl enable atd
systemctl start atd

# Clonar projeto
cd /home/ec2-user
git clone https://github.com/alerabello/sistema-de-locadora.git
cd sistema-de-locadora

# Criar ambiente virtual
python3 -m venv venv
source venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt

# Criar banco
mkdir -p instance
touch instance/locadora.db
chmod -R 775 instance/
chown -R ec2-user:ec2-user instance/
python3 run.py & sleep 5 && pkill -f run.py

# Criar script de admin
cat <<EOF > create_admin.py
from app import db
from app.models import Usuario
from werkzeug.security import generate_password_hash
from run import app
with app.app_context():
    if not Usuario.query.filter_by(email="admin@email.com").first():
        db.session.add(Usuario(
            nome="Administrador",
            email="admin@email.com",
            senha=generate_password_hash("admin123"),
            is_admin=True
        ))
        db.session.commit()
EOF

# Criar usuários aleatórios
cat <<EOF > popular_usuarios.py
from app import db
from app.models import Usuario
from werkzeug.security import generate_password_hash
from run import app
usuarios = [
    {"nome": "João", "email": "joao@email.com"},
    {"nome": "Maria", "email": "maria@email.com"},
    {"nome": "Pedro", "email": "pedro@email.com"}
]
with app.app_context():
    for u in usuarios:
        if not Usuario.query.filter_by(email=u["email"]).first():
            db.session.add(Usuario(
                nome=u["nome"],
                email=u["email"],
                senha=generate_password_hash("teste123"),
                is_admin=False
            ))
    db.session.commit()
EOF

# Criar filmes com cartazes
cat <<EOF > popular_filmes.py
from app import db
from app.models import Filme
from run import app
filmes = [
    {"titulo": "Interestelar", "ano": 2014, "cartaz_url": "https://m.media-amazon.com/images/I/71n58PKBFiL._AC_UF894,1000_QL80_.jpg"},
    {"titulo": "O Poderoso Chefão", "ano": 1972, "cartaz_url": "https://m.media-amazon.com/images/I/81lZMFwwg5L._AC_UF1000,1000_QL80_.jpg"},
    {"titulo": "Batman: O Cavaleiro das Trevas", "ano": 2008, "cartaz_url": "https://m.media-amazon.com/images/I/71pH5SxCRWL._AC_UF894,1000_QL80_.jpg"},
    {"titulo": "Forrest Gump", "ano": 1994, "cartaz_url": "https://m.media-amazon.com/images/I/61coc7ZMJyL._AC_UF1000,1000_QL80_.jpg"},
    {"titulo": "Matrix", "ano": 1999, "cartaz_url": "https://m.media-amazon.com/images/I/81w+4xkUQdL._AC_UF894,1000_QL80_.jpg"}
]
with app.app_context():
    for f in filmes:
        if not Filme.query.filter_by(titulo=f["titulo"]).first():
            db.session.add(Filme(
                titulo=f["titulo"],
                ano=f["ano"],
                disponivel=True,
                cartaz_url=f["cartaz_url"]
            ))
    db.session.commit()
EOF

# Executar scripts
python3 create_admin.py
python3 popular_usuarios.py
python3 popular_filmes.py

# Criar serviço systemd
cat <<EOF > /etc/systemd/system/flaskapp.service
[Unit]
Description=Flask Locadora App
After=network.target

[Service]
User=ec2-user
WorkingDirectory=/home/ec2-user/sistema-de-locadora
Environment="FLASK_APP=run.py"
Environment="PATH=/home/ec2-user/sistema-de-locadora/venv/bin"
ExecStart=/home/ec2-user/sistema-de-locadora/venv/bin/flask run --host=0.0.0.0 --port=5000
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# Ativar app no boot
systemctl daemon-reexec
systemctl daemon-reload
echo "systemctl enable flaskapp && systemctl start flaskapp" | at now + 1 minute
