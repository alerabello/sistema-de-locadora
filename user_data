#!/bin/bash

# Atualizar pacotes e instalar dependências
yum update -y
yum install -y git python3 at

# Instalar GitHub CLI (opcional, mas incluso aqui)
yum install -y yum-utils
yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
yum install -y gh

# Iniciar serviço atd para agendamento
systemctl enable atd
systemctl start atd

# Clonar o projeto
cd /home/ec2-user
git clone https://github.com/alerabello/sistema-de-locadora.git
cd sistema-de-locadora

# Criar ambiente virtual e instalar dependências
python3 -m venv venv
source venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt

# Corrigir permissões do banco SQLite
mkdir -p /home/ec2-user/sistema-de-locadora/instance
touch /home/ec2-user/sistema-de-locadora/instance/locadora.db
chmod -R 775 /home/ec2-user/sistema-de-locadora/instance/
chown -R ec2-user:ec2-user /home/ec2-user/sistema-de-locadora/instance/

# Criar banco (executar app brevemente)
python3 run.py & sleep 5 && pkill -f run.py

# Criar script admin + dados fake
cat <<EOF > seed_data.py
from app import db
from app.models import Usuario, Filme
from werkzeug.security import generate_password_hash
from run import app
import random

with app.app_context():
    # Admin
    if not Usuario.query.filter_by(email="admin@email.com").first():
        admin = Usuario(
            nome="Administrador",
            email="admin@email.com",
            senha=generate_password_hash("admin123"),
            is_admin=True
        )
        db.session.add(admin)

    # Usuários comuns
    for i in range(5):
        email = f"user{i}@email.com"
        if not Usuario.query.filter_by(email=email).first():
            user = Usuario(
                nome=f"Usuário {i}",
                email=email,
                senha=generate_password_hash("user123"),
                is_admin=False
            )
            db.session.add(user)

    # Filmes
    titulos = ["Matrix", "O Senhor dos Anéis", "Interestelar", "Gladiador", "Avatar", "Top Gun", "Vingadores"]
    anos = [1999, 2001, 2014, 2000, 2009, 1986, 2012]
    for i in range(len(titulos)):
        if not Filme.query.filter_by(titulo=titulos[i]).first():
            db.session.add(Filme(titulo=titulos[i], ano=anos[i], disponivel=True))

    db.session.commit()
    print("✅ Dados de exemplo criados com sucesso")
EOF

# Executar o seed
python3 seed_data.py

# Criar serviço systemd
cat <<EOF > /etc/systemd/system/flaskapp.service
[Unit]
Description=Flask Locadora App
After=network.target

[Service]
User=ec2-user
WorkingDirectory=/home/ec2-user/sistema-de-locadora
Environment="FLASK_APP=run.py"
Environment="PATH=/home/ec2-user/sistema-de-locadora/venv/bin"
ExecStart=/home/ec2-user/sistema-de-locadora/venv/bin/flask run --host=0.0.0.0 --port=5000
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# Recarregar serviços e agendar inicialização
systemctl daemon-reexec
systemctl daemon-reload

echo "systemctl enable flaskapp && systemctl start flaskapp" | at now + 1 minute
